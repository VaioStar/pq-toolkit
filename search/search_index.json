{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello there","text":""},{"location":"#what-is-going-on","title":"What is going on?","text":"<p>This project came to life as a part of WIMU lecture @ WUT's Faculty of Electronics and Information Technology.</p> <p>The main goal was to create a toolkit that allows to perform AB, ABX, APE and MUSHRA tests on some music samples.</p>"},{"location":"#project-structure","title":"Project structure","text":"<p>This project consist of 2 main parts: python module and web application testing platform.</p> <p>The former allows user to create, setup, configure and delete experiments. The latter helps to conduct experiments in accessible way with end users.</p>"},{"location":"getting-started/api-client-walkthrough/","title":"Getting started","text":""},{"location":"getting-started/api-client-walkthrough/#creation-of-the-api-client","title":"Creation of the API client","text":"<p>All the communication with the backend is organised by the API Client.</p> <p>This is how to create its instance:</p> <pre><code>from pqtoolkit import PqToolkitAPIClient\n\n\napi_client = PqToolkitAPIClient()\n</code></pre> <p>Warning</p> <p>Initiating the API client will test whether the given host and port are correct.</p> <p>Tip</p> <p>You can also pass the username and password in the constructor to be immediatelly logged in, otherwise you need to call the <code>log_in</code> method to use restricted endpoints</p>"},{"location":"getting-started/api-client-walkthrough/#creating-new-experiment","title":"Creating new experiment","text":"<p>Experiments are the basic elements allowing to perform tests.</p> <p>You can create one the following way: </p> <pre><code>from pqtoolkit import PqToolkitAPIClient\n\n\napi_client = PqToolkitAPIClient()\napi_client.log_in('my username', 'my password')\nexperiments = api_client.create_experiment(experiment_name=\"Your_fancy_experiment_name\")\n</code></pre>"},{"location":"getting-started/api-client-walkthrough/#setting-up-an-experiment","title":"Setting up an experiment","text":"<p>Setting up an experiment is quite easy.</p> <p>You need to create the appropriate setup class, depending on which test you want to perform:</p> ABABXAPEMUSHRA <pre><code>from pqtoolkit.dataclasses import PqExperiment, PqTestAB, PqSample, PqQuestion\n\n\nexperiment_setup = PqExperiment(\n    name=\"Test 1\",\n    description=\"Some test suite\",\n    tests=[\n        PqTestAB(\n            test_number=1,\n            samples=[\n                PqSample(sample_id=\"s1\", asset_path=\"file_sample_5.mp3\"),\n                PqSample(sample_id=\"s2\", asset_path=\"file_sample_700.mp3\")\n            ],\n            questions=[\n                PqQuestion(question_id=\"q1\", text=\"Select better quality\"),\n                PqQuestion(question_id=\"q2\", text=\"Select more warmth\")\n            ]\n        )\n    ]\n)\n</code></pre> <pre><code>from pqtoolkit.dataclasses import PqExperiment, PqTestABX, PqSample, PqQuestion\n\n\nexperiment_setup = PqExperiment(\n    name=\"Test 1\",\n    description=\"Some test suite\",\n    tests=[\n        PqTestABX(\n            test_number=2,\n            samples=[\n                PqSample(sample_id=\"s1\", asset_path=\"file_sample_5.mp3\"),\n                PqSample(sample_id=\"s2\", asset_path=\"file_sample_700.mp3\")\n            ],\n            questions=[\n                PqQuestion(question_id=\"q1\", text=\"Select better quality\"),\n                PqQuestion(question_id=\"q2\", text=\"Select more warmth\")\n            ]\n        )\n    ]\n)\n</code></pre> <pre><code>from pqtoolkit.dataclasses import PqExperiment, PqTestAPE, PqSample, PqQuestion\n\n\nexperiment_setup = PqExperiment(\n    name=\"Test 1\",\n    description=\"Some test suite\",\n    tests=[\n        PqTestAPE(\n            test_number=3,\n            samples=[\n                PqSample(sample_id=\"s1\", asset_path=\"file_sample_5.mp3\"),\n                PqSample(sample_id=\"s2\", asset_path=\"file_sample_700.mp3\"),\n                PqSample(sample_id=\"s3\", asset_path=\"sample-12s.mp3\")\n            ],\n            axis=[\n                PqQuestion(question_id=\"a1\", text=\"Quality\"),\n                PqQuestion(question_id=\"a2\", text=\"Depth\")\n            ]\n        )\n    ]\n)\n</code></pre> <pre><code>from pqtoolkit.dataclasses import PqExperiment, PqTestMUSHRA, PqSample\n\n\nexperiment_setup = PqExperiment(\n    name=\"Test 1\",\n    description=\"Some test suite\",\n    tests=[\n        PqTestMUSHRA(\n            test_number=4,\n            reference=PqSample(sample_id=\"ref\", asset_path=\"file_sample_5.mp3\"),\n            anchors=[\n                PqSample(sample_id=\"a1\", asset_path=\"file_sample_700.mp3\"),\n                PqSample(sample_id=\"a2\", asset_path=\"file_sample_5.mp3\")\n            ],\n            samples=[\n                PqSample(sample_id=\"s1\", asset_path=\"sample-12s.mp3\"),\n                PqSample(sample_id=\"s2\", asset_path=\"sample-15s.mp3\"),\n                PqSample(sample_id=\"s3\", asset_path=\"sample-12s.mp3\"),\n                PqSample(sample_id=\"s4\", asset_path=\"sample-15s.mp3\"),\n                PqSample(sample_id=\"s5\", asset_path=\"sample-12s.mp3\"),\n                PqSample(sample_id=\"s6\", asset_path=\"sample-15s.mp3\")\n            ]\n        )\n    ]\n)\n</code></pre> <p>Tip</p> <p>You can create multiple tests per experiment at once! </p> <p>When setting up an experiment:</p> <pre><code>from pqtoolkit.dataclasses import PqExperiment, PqTestAB, PqTestMUSHRA  # and other\n\n\nexperiment_setup = PqExperiment(\n    name=\"Test 1\",\n    description=\"Some test suite\",\n    tests=[\n        PqTestAB( ... ),\n        PqTestAB( ... ),\n        PqTestMUSHRA( ... ),\n        PqTestMUSHRA( ... )  # and so on\n    ]\n)\n</code></pre> <p>Having created the setup object, the only thing left is to upload the configuration to an experiment:</p> <pre><code>from pqtoolkit import PqToolkitAPIClient\n\n\napi_client = PqToolkitAPIClient(login='my login', password='my password')\napi_client.setup_experiment(\n    experiment_name=\"Your_fancy_experiment_name\", \n    experiment_setup=experiment_setup)\n</code></pre> <p>Danger</p> <p>Be cautious!</p> <p>Using <code>api_client.setup_experiment()</code> method on an already configured experiment will overrite the old configuration.</p>"},{"location":"getting-started/api-client-walkthrough/#uploading-samples-as-a-file","title":"Uploading samples as a file","text":"<p>Once you configured an experiment you should proceed to uploading samples, so the test could serve them to UI.</p> <pre><code>from pqtoolkit import PqToolkitAPIClient\n\n\napi_client = PqToolkitAPIClient(login='my login', password='my password')\nsample_path = \"./file_sample_5.mp3\"\nwith open(sample_path, 'rb') as file:\n    api_client.upload_sample(experiment_name=\"Your_fancy_experiment_name\", sample_name=\"file_sample_5.mp3\", sample_binary=file)\n</code></pre> <p>Danger</p> <p>Be cautious!</p> <p>Using <code>api_client.upload_sample()</code> method on an experiment will overrite already existing sample if their names match.</p>"},{"location":"getting-started/api-client-walkthrough/#getting-the-list-of-all-available-experiments","title":"Getting the list of all available experiments","text":"<p>This method will allow you to obtain all experiments' names, so you can fetch them later individually.</p> <pre><code>from pqtoolkit import PqToolkitAPIClient\n\n\napi_client = PqToolkitAPIClient()\nexperiments = api_client.get_experiments()\n</code></pre>"},{"location":"getting-started/api-client-walkthrough/#getting-experiment-details-by-name","title":"Getting experiment details by name","text":"<p>You can fetch detailed information about given experiment like this:</p> <pre><code>from pqtoolkit import PqToolkitAPIClient\n\n\napi_client = PqToolkitAPIClient()\nexperiment = api_client.get_experiment(experiment_name=\"Your_fancy_experiment_name\")\n</code></pre>"},{"location":"getting-started/api-client-walkthrough/#getting-experiment-results-list","title":"Getting experiment results list","text":"<p>Like in experiments, you can get all experiment's results list to be able to fetch one's answers later on. <pre><code>from pqtoolkit import PqToolkitAPIClient\n\n\napi_client = PqToolkitAPIClient(login='my login', password='my password')\nexperiment_results = api_client.get_experiment_results(experiment_name=\"Your_fancy_experiment_name\")\n</code></pre></p>"},{"location":"getting-started/api-client-walkthrough/#getting-detailed-experiment-results","title":"Getting detailed experiment results","text":"<p>This is how you obtain answers from a result:</p> <pre><code>from pqtoolkit import PqToolkitAPIClient\n\n\napi_client = PqToolkitAPIClient(login='my login', password='my password')\nexperiment_result = api_client.get_experiment_test_results(\n    experiment_name=experiment_name,\n    result_name=\"Some result name\"  # Use get_experiment_results() to get available results\n)\n</code></pre>"},{"location":"getting-started/api-client-walkthrough/#deleting-the-experiment","title":"Deleting the experiment","text":"<p>When you're done testing you can remove the experiment from the platform like this:</p> <pre><code>from pqtoolkit import PqToolkitAPIClient\n\n\napi_client = PqToolkitAPIClient(login='my login', password='my password')\nexperiments = api_client.delete_experiment(experiment_name=\"Your_fancy_experiment_name\")\n)\n</code></pre>"},{"location":"getting-started/prerequisites/","title":"Prerequisites","text":"<p>The project runs on Python 3.10+.</p>"},{"location":"getting-started/prerequisites/#installation","title":"Installation","text":"<p>Firstly, you should obtain all project dependencies:</p> &gt; cd src/pq-toolkit&gt; poetry installInstalled <p>That's it! You're ready to go!</p> <p>Tip</p> <p>Consider using Python's virtual environments to keep your installation nice and clean.</p>"},{"location":"getting-started/prerequisites/#what-comes-next","title":"What comes next?","text":"<p>Check how to begin working with the toolkit or dive right into direct client reference.</p>"},{"location":"reference/PqToolkitAPIClient/","title":"Documentation for <code>PqToolkitAPIClient</code>","text":""},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient","title":"<code>pqtoolkit.PqToolkitAPIClient</code>","text":"<p>Main class for the Pq Toolkit python client.</p> <p>When creating a new client object, class checks whether the backend is up and running.</p> <p>Parameters:</p> Name Type Description Default <code>base_host</code> <code>str</code> <p>The host of the API.</p> <code>'http://localhost'</code> <code>base_port</code> <code>int</code> <p>The port of the API.</p> <code>8000</code> <code>api_version</code> <code>str</code> <p>Version of api, defaults to v1</p> <code>'v1'</code> <code>login</code> <code>str</code> <p>login for authorization (Optional)</p> <code>None</code> <code>password</code> <code>str</code> <p>password for authorization (Optional)</p> <code>None</code> Source code in <code>src/pq-toolkit/pqtoolkit/api_client.py</code> <pre><code>class PqToolkitAPIClient:\n    \"\"\"\n    Main class for the Pq Toolkit python client.\n\n    When creating a new client object, class checks whether the backend is up and running.\n\n    Parameters:\n        base_host: The host of the API.\n        base_port: The port of the API.\n        api_version: Version of api, defaults to v1\n        login: login for authorization (Optional)\n        password: password for authorization (Optional)\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        base_host: str = \"http://localhost\",\n        base_port: int = 8000,\n        api_version: str = \"v1\",\n        login: str = None,\n        password: str = None,\n    ):\n        self._base_host = base_host\n        self._base_port = base_port\n        self._oauth_token = None\n        self._oauth_id = None\n        self._endpoint = f\"{self._base_host}:{self._base_port}/api/{api_version}\"\n\n        response = self._get(\n            \"/status\",\n        )\n        status = response.json().get(\"status\")\n        if status != \"HEALTHY\":\n            raise ConnectionError(f\"Cannot read status from {self._endpoint}\")\n        logging.info(f\"Connected to {self._endpoint}, status: HEALTHY\")\n\n        if login and password:\n            self.log_in(login, password)\n\n    def _request(self, **kwargs):\n        try:\n            if self.is_logged_in:\n                if \"headers\" not in kwargs:\n                    kwargs[\"headers\"] = {}\n                kwargs[\"headers\"][\"Authorization\"] = self._auth_token\n\n            response = requests.request(timeout=2.0, **kwargs)\n            return response\n        except ConnectTimeout:\n            print(\"Connection timed out\")\n        except ConnectionError as e:\n            print(f\"Encountered an error during connection: {e}\")\n\n    def _get(self, path, **kwargs):\n        return self._request(method=\"GET\", url=self._endpoint + path, **kwargs)\n\n    def _post(self, path, **kwargs):\n        return self._request(method=\"POST\", url=self._endpoint + path, **kwargs)\n\n    def _delete(self, path, **kwargs):\n        return self._request(method=\"DELETE\", url=self._endpoint + path, **kwargs)\n\n    @staticmethod\n    def _serialize_with_pydantic(func):\n        def _determine_return_type(types_to_return) -&gt; (type, bool):\n            type_to_return = None\n            is_collection = False\n\n            if isinstance(types_to_return, GenericAlias):\n                is_collection = True\n            if isinstance(types_to_return, UnionType):\n                for iterable_type in types_to_return.__args__:\n                    if iterable_type is not type(None):\n                        type_to_return = iterable_type\n                        if isinstance(iterable_type, GenericAlias):\n                            is_collection = True\n                            type_to_return = iterable_type.__args__[0]\n                            break\n                        if inspect.isclass(iterable_type) and issubclass(\n                            iterable_type, BaseModel\n                        ):\n                            break\n            else:\n                type_to_return = types_to_return\n\n            return type_to_return, is_collection\n\n        def _parse_response(result, is_collection, type_to_return):\n            if is_collection:\n                collection = []\n                for item in result:\n                    casted_item = type_to_return(**item)\n                    collection.append(casted_item)\n                return collection\n            else:\n                casted_result = type_to_return(**result)\n                return casted_result\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            type_hints = get_type_hints(func, include_extras=True)\n            types_to_return = type_hints.get(\"return\")\n\n            if not types_to_return:\n                raise PqSerializationException(\n                    f\"Function {func.__name__} has not ben annotated with any return type\"\n                )\n\n            type_to_return, is_collection = _determine_return_type(types_to_return)\n\n            if not issubclass(type_to_return, BaseModel):\n                raise PqSerializationException(\n                    f\"Function {func.__name__} has not ben annotated with Pydantic's \"\n                    f\"BaseModel subclass or an Union with its subclass.\"\n                )\n\n            result = func(*args, **kwargs)\n\n            if result is None:\n                return None\n\n            try:\n                casted_result = _parse_response(result, is_collection, type_to_return)\n                return casted_result\n            except (RuntimeError, PydanticSchemaGenerationError, ValidationError) as e:\n                raise PqSerializationException(\n                    f\"Cannot cast the result to {types_to_return}: {e}\"\n                )\n\n        return wrapper\n\n    @property\n    def _auth_token(self):\n        return f\"{self._oauth_id} {self._oauth_token}\"\n\n    def log_in(self, login: str, password: str):\n        \"\"\"Logs in the user, obtains a valid token for authorization\n\n        Args:\n            login (str): user name\n            password (str): password\n\n        Raises:\n            IncorrectLogin: When wrong credidentials are provided\n        \"\"\"\n        data = {\"username\": login, \"password\": password}\n        resp = self._post(\"/auth/login\", data=data)\n\n        match resp.status_code:\n            case 200:\n                pass\n            case _:\n                raise IncorrectLogin()\n        resp = resp.json()\n        self._oauth_token = resp[\"access_token\"]\n        self._oauth_id = resp[\"token_type\"]\n\n    def get_user(self) -&gt; dict:\n        \"\"\"Reutrns user information\n\n        Returns:\n            dict: user information dict\n        \"\"\"\n        return self._get(\"/auth/user\").json()\n\n    @property\n    def is_logged_in(self) -&gt; bool:\n        \"\"\"Checks if api client has obtained authorization token already\n\n        Returns:\n            bool: Is authorized\n        \"\"\"\n        return self._oauth_id and self._oauth_token\n\n    def get_experiments(self) -&gt; list[str]:\n        \"\"\"\n        Method allows to get a list of all experiments currently defined.\n\n        Returns:\n            experiments: A list of strings representing names of the experiments.\n        \"\"\"\n        response = self._get(\"/experiments\")\n        match response.status_code:\n            case 200:\n                experiments = response.json().get(\"experiments\")\n                return experiments\n            case 404:\n                return []\n\n    @_serialize_with_pydantic\n    def get_experiment(self, *, experiment_name: str) -&gt; PqExperiment | None:\n        \"\"\"\n        Method allows to get a single experiment with all its configuration.\n\n        Parameters:\n            experiment_name: The name of the experiment.\n\n        Returns:\n            experiment: An object representing given experiment.\n        \"\"\"\n\n        response = self._get(f\"/experiments/{experiment_name}\")\n        match response.status_code:\n            case 200:\n                experiment = response.json()\n                return experiment\n            case 404:\n                return None\n\n    def create_experiment(self, *, experiment_name: str) -&gt; list[str]:\n        \"\"\"\n        Method allows to create an experiment.\n\n        Parameters:\n            experiment_name: The name of the experiment.\n\n        Returns:\n            experiments: A list of strings representing names of the experiments.\n\n        Raises:\n            PqExperimentAlreadyExistsException: If the experiment of given name already exists.\n        \"\"\"\n        response = self._post(\"/experiments\", json={\"name\": f\"{experiment_name}\"})\n        match response.status_code:\n            case 200:\n                experiments = response.json().get(\"experiments\")\n                return experiments\n            case 409:\n                raise PqExperimentAlreadyExistsException(\n                    experiment_name=experiment_name\n                )\n            case 401:\n                raise NotAuthorisedError()\n            case _:\n                raise DetailedError(response.json())\n\n    def delete_experiment(self, *, experiment_name: str) -&gt; list[str]:\n        \"\"\"\n        Method allows to delete an experiment.\n\n        Parameters:\n            experiment_name: The name of the experiment.\n\n        Returns:\n            experiments: A list of strings representing names of the experiments.\n        \"\"\"\n\n        response = self._delete(\"/experiments\", json={\"name\": f\"{experiment_name}\"})\n        match response.status_code:\n            case 200:\n                experiments = response.json().get(\"experiments\")\n                return experiments\n            case 401:\n                raise NotAuthorisedError()\n            case 404:\n                pass\n            case _:\n                raise DetailedError(response.json())\n\n    def setup_experiment(self, *, experiment_name: str, experiment_setup: PqExperiment):\n        \"\"\"\n        Method allows to create an experiment.\n\n        Parameters:\n            experiment_name: The name of the experiment.\n            experiment_setup: The experiment setup object\n\n        Raises:\n            PqExperimentSetupException: Either when the given configuration is invalid or the API returns an error.\n        \"\"\"\n\n        if not isinstance(experiment_setup, PqExperiment):\n            raise PqExperimentSetupException(\n                experiment_name=experiment_name,\n                message=\"The experiment settings must be a PqExperiment\",\n            )\n        model_dict = experiment_setup.model_dump_json(by_alias=True, exclude_none=True)\n        files_struct = {\n            \"file\": (\n                \"setup.json\",\n                model_dict,\n                \"application/json\",\n                {\"Content-Disposition\": \"form-data\"},\n            )\n        }\n        response = self._post(f\"/experiments/{experiment_name}\", files=files_struct)\n\n        match response.status_code:\n            case 200:\n                is_success = response.json().get(\"success\")\n                if not is_success:\n                    raise PqExperimentSetupException(experiment_name=experiment_name)\n            case 400:\n                message = response.json().get(\"message\")\n                raise PqExperimentSetupException(\n                    experiment_name=experiment_name, message=message\n                )\n            case 401:\n                raise NotAuthorisedError()\n            case _:\n                raise DetailedError(response.json())\n\n    def upload_sample(\n        self, *, experiment_name: str, sample_name: str, sample_binary: bytes | BinaryIO\n    ):\n        \"\"\"\n        Method allows to upload a sample to the experiment.\n\n        Parameters:\n            experiment_name: The name of the experiment.\n            sample_name: The name of the sample (must match the sample name in the experiment setup).\n            sample_binary: The music file itself.\n\n        Raises:\n            PqExperimentSampleUploadException: When the API returns an error.\n        \"\"\"\n\n        files_struct = {\n            \"file\": (\n                sample_name,\n                sample_binary,\n                \"audio/mpeg\",\n                {\"Content-Disposition\": \"form-data\"},\n            )\n        }\n        response = self._post(\n            f\"/experiments/{experiment_name}/samples\", files=files_struct\n        )\n\n        match response.status_code:\n            case 200:\n                is_success = response.json().get(\"success\")\n                if not is_success:\n                    raise PqExperimentSampleUploadException(\n                        experiment_name=experiment_name, sample_name=sample_name\n                    )\n            case 400:\n                message = response.json().get(\"message\")\n                raise PqExperimentSampleUploadException(\n                    experiment_name=experiment_name,\n                    sample_name=sample_name,\n                    message=message,\n                )\n            case 401:\n                raise NotAuthorisedError()\n            case _:\n                raise DetailedError(response.json())\n\n    def get_experiment_results(self, *, experiment_name: str) -&gt; list[str]:\n        \"\"\"\n        Method allows to get a list of experiments' results' names.\n\n        Parameters:\n            experiment_name: The name of the experiment.\n\n        Returns:\n            experiment_results: list of experiments' results' names.\n        \"\"\"\n\n        response = self._get(f\"/experiments/{experiment_name}/results\").json()\n        if experiment_results := response.get(\"results\"):\n            return experiment_results\n        return []\n\n    @_serialize_with_pydantic\n    def get_experiment_test_results(\n        self, *, experiment_name: str, result_name: str\n    ) -&gt; PqTestResultsList | None:\n        \"\"\"\n        Method allows to get a list of experiments' results' names.\n\n        Parameters:\n            experiment_name: The name of the experiment.\n            result_name: The name of the experiment result.\n\n        Returns:\n            experiment_results: An object representing the experiment's results'.\n        \"\"\"\n\n        response = self._get(f\"/experiments/{experiment_name}/results/{result_name}\")\n        match response.status_code:\n            case 200:\n                experiment_results = response.json()\n                return experiment_results\n            case 404:\n                return None\n            case 401:\n                raise NotAuthorisedError()\n            case _:\n                raise DetailedError(response.json())\n</code></pre>"},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient.is_logged_in","title":"<code>is_logged_in: bool</code>  <code>property</code>","text":"<p>Checks if api client has obtained authorization token already</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Is authorized</p>"},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient.log_in","title":"<code>log_in(login, password)</code>","text":"<p>Logs in the user, obtains a valid token for authorization</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>user name</p> required <code>password</code> <code>str</code> <p>password</p> required <p>Raises:</p> Type Description <code>IncorrectLogin</code> <p>When wrong credidentials are provided</p> Source code in <code>src/pq-toolkit/pqtoolkit/api_client.py</code> <pre><code>def log_in(self, login: str, password: str):\n    \"\"\"Logs in the user, obtains a valid token for authorization\n\n    Args:\n        login (str): user name\n        password (str): password\n\n    Raises:\n        IncorrectLogin: When wrong credidentials are provided\n    \"\"\"\n    data = {\"username\": login, \"password\": password}\n    resp = self._post(\"/auth/login\", data=data)\n\n    match resp.status_code:\n        case 200:\n            pass\n        case _:\n            raise IncorrectLogin()\n    resp = resp.json()\n    self._oauth_token = resp[\"access_token\"]\n    self._oauth_id = resp[\"token_type\"]\n</code></pre>"},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient.get_user","title":"<code>get_user()</code>","text":"<p>Reutrns user information</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>user information dict</p> Source code in <code>src/pq-toolkit/pqtoolkit/api_client.py</code> <pre><code>def get_user(self) -&gt; dict:\n    \"\"\"Reutrns user information\n\n    Returns:\n        dict: user information dict\n    \"\"\"\n    return self._get(\"/auth/user\").json()\n</code></pre>"},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient.get_experiments","title":"<code>get_experiments()</code>","text":"<p>Method allows to get a list of all experiments currently defined.</p> <p>Returns:</p> Name Type Description <code>experiments</code> <code>list[str]</code> <p>A list of strings representing names of the experiments.</p> Source code in <code>src/pq-toolkit/pqtoolkit/api_client.py</code> <pre><code>def get_experiments(self) -&gt; list[str]:\n    \"\"\"\n    Method allows to get a list of all experiments currently defined.\n\n    Returns:\n        experiments: A list of strings representing names of the experiments.\n    \"\"\"\n    response = self._get(\"/experiments\")\n    match response.status_code:\n        case 200:\n            experiments = response.json().get(\"experiments\")\n            return experiments\n        case 404:\n            return []\n</code></pre>"},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient.get_experiment","title":"<code>get_experiment(*, experiment_name)</code>","text":"<p>Method allows to get a single experiment with all its configuration.</p> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:</p> Name Type Description <code>experiment</code> <code>PqExperiment | None</code> <p>An object representing given experiment.</p> Source code in <code>src/pq-toolkit/pqtoolkit/api_client.py</code> <pre><code>@_serialize_with_pydantic\ndef get_experiment(self, *, experiment_name: str) -&gt; PqExperiment | None:\n    \"\"\"\n    Method allows to get a single experiment with all its configuration.\n\n    Parameters:\n        experiment_name: The name of the experiment.\n\n    Returns:\n        experiment: An object representing given experiment.\n    \"\"\"\n\n    response = self._get(f\"/experiments/{experiment_name}\")\n    match response.status_code:\n        case 200:\n            experiment = response.json()\n            return experiment\n        case 404:\n            return None\n</code></pre>"},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient.create_experiment","title":"<code>create_experiment(*, experiment_name)</code>","text":"<p>Method allows to create an experiment.</p> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:</p> Name Type Description <code>experiments</code> <code>list[str]</code> <p>A list of strings representing names of the experiments.</p> <p>Raises:</p> Type Description <code>PqExperimentAlreadyExistsException</code> <p>If the experiment of given name already exists.</p> Source code in <code>src/pq-toolkit/pqtoolkit/api_client.py</code> <pre><code>def create_experiment(self, *, experiment_name: str) -&gt; list[str]:\n    \"\"\"\n    Method allows to create an experiment.\n\n    Parameters:\n        experiment_name: The name of the experiment.\n\n    Returns:\n        experiments: A list of strings representing names of the experiments.\n\n    Raises:\n        PqExperimentAlreadyExistsException: If the experiment of given name already exists.\n    \"\"\"\n    response = self._post(\"/experiments\", json={\"name\": f\"{experiment_name}\"})\n    match response.status_code:\n        case 200:\n            experiments = response.json().get(\"experiments\")\n            return experiments\n        case 409:\n            raise PqExperimentAlreadyExistsException(\n                experiment_name=experiment_name\n            )\n        case 401:\n            raise NotAuthorisedError()\n        case _:\n            raise DetailedError(response.json())\n</code></pre>"},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient.delete_experiment","title":"<code>delete_experiment(*, experiment_name)</code>","text":"<p>Method allows to delete an experiment.</p> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:</p> Name Type Description <code>experiments</code> <code>list[str]</code> <p>A list of strings representing names of the experiments.</p> Source code in <code>src/pq-toolkit/pqtoolkit/api_client.py</code> <pre><code>def delete_experiment(self, *, experiment_name: str) -&gt; list[str]:\n    \"\"\"\n    Method allows to delete an experiment.\n\n    Parameters:\n        experiment_name: The name of the experiment.\n\n    Returns:\n        experiments: A list of strings representing names of the experiments.\n    \"\"\"\n\n    response = self._delete(\"/experiments\", json={\"name\": f\"{experiment_name}\"})\n    match response.status_code:\n        case 200:\n            experiments = response.json().get(\"experiments\")\n            return experiments\n        case 401:\n            raise NotAuthorisedError()\n        case 404:\n            pass\n        case _:\n            raise DetailedError(response.json())\n</code></pre>"},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient.setup_experiment","title":"<code>setup_experiment(*, experiment_name, experiment_setup)</code>","text":"<p>Method allows to create an experiment.</p> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <code>experiment_setup</code> <code>PqExperiment</code> <p>The experiment setup object</p> required <p>Raises:</p> Type Description <code>PqExperimentSetupException</code> <p>Either when the given configuration is invalid or the API returns an error.</p> Source code in <code>src/pq-toolkit/pqtoolkit/api_client.py</code> <pre><code>def setup_experiment(self, *, experiment_name: str, experiment_setup: PqExperiment):\n    \"\"\"\n    Method allows to create an experiment.\n\n    Parameters:\n        experiment_name: The name of the experiment.\n        experiment_setup: The experiment setup object\n\n    Raises:\n        PqExperimentSetupException: Either when the given configuration is invalid or the API returns an error.\n    \"\"\"\n\n    if not isinstance(experiment_setup, PqExperiment):\n        raise PqExperimentSetupException(\n            experiment_name=experiment_name,\n            message=\"The experiment settings must be a PqExperiment\",\n        )\n    model_dict = experiment_setup.model_dump_json(by_alias=True, exclude_none=True)\n    files_struct = {\n        \"file\": (\n            \"setup.json\",\n            model_dict,\n            \"application/json\",\n            {\"Content-Disposition\": \"form-data\"},\n        )\n    }\n    response = self._post(f\"/experiments/{experiment_name}\", files=files_struct)\n\n    match response.status_code:\n        case 200:\n            is_success = response.json().get(\"success\")\n            if not is_success:\n                raise PqExperimentSetupException(experiment_name=experiment_name)\n        case 400:\n            message = response.json().get(\"message\")\n            raise PqExperimentSetupException(\n                experiment_name=experiment_name, message=message\n            )\n        case 401:\n            raise NotAuthorisedError()\n        case _:\n            raise DetailedError(response.json())\n</code></pre>"},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient.upload_sample","title":"<code>upload_sample(*, experiment_name, sample_name, sample_binary)</code>","text":"<p>Method allows to upload a sample to the experiment.</p> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <code>sample_name</code> <code>str</code> <p>The name of the sample (must match the sample name in the experiment setup).</p> required <code>sample_binary</code> <code>bytes | BinaryIO</code> <p>The music file itself.</p> required <p>Raises:</p> Type Description <code>PqExperimentSampleUploadException</code> <p>When the API returns an error.</p> Source code in <code>src/pq-toolkit/pqtoolkit/api_client.py</code> <pre><code>def upload_sample(\n    self, *, experiment_name: str, sample_name: str, sample_binary: bytes | BinaryIO\n):\n    \"\"\"\n    Method allows to upload a sample to the experiment.\n\n    Parameters:\n        experiment_name: The name of the experiment.\n        sample_name: The name of the sample (must match the sample name in the experiment setup).\n        sample_binary: The music file itself.\n\n    Raises:\n        PqExperimentSampleUploadException: When the API returns an error.\n    \"\"\"\n\n    files_struct = {\n        \"file\": (\n            sample_name,\n            sample_binary,\n            \"audio/mpeg\",\n            {\"Content-Disposition\": \"form-data\"},\n        )\n    }\n    response = self._post(\n        f\"/experiments/{experiment_name}/samples\", files=files_struct\n    )\n\n    match response.status_code:\n        case 200:\n            is_success = response.json().get(\"success\")\n            if not is_success:\n                raise PqExperimentSampleUploadException(\n                    experiment_name=experiment_name, sample_name=sample_name\n                )\n        case 400:\n            message = response.json().get(\"message\")\n            raise PqExperimentSampleUploadException(\n                experiment_name=experiment_name,\n                sample_name=sample_name,\n                message=message,\n            )\n        case 401:\n            raise NotAuthorisedError()\n        case _:\n            raise DetailedError(response.json())\n</code></pre>"},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient.get_experiment_results","title":"<code>get_experiment_results(*, experiment_name)</code>","text":"<p>Method allows to get a list of experiments' results' names.</p> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:</p> Name Type Description <code>experiment_results</code> <code>list[str]</code> <p>list of experiments' results' names.</p> Source code in <code>src/pq-toolkit/pqtoolkit/api_client.py</code> <pre><code>def get_experiment_results(self, *, experiment_name: str) -&gt; list[str]:\n    \"\"\"\n    Method allows to get a list of experiments' results' names.\n\n    Parameters:\n        experiment_name: The name of the experiment.\n\n    Returns:\n        experiment_results: list of experiments' results' names.\n    \"\"\"\n\n    response = self._get(f\"/experiments/{experiment_name}/results\").json()\n    if experiment_results := response.get(\"results\"):\n        return experiment_results\n    return []\n</code></pre>"},{"location":"reference/PqToolkitAPIClient/#pqtoolkit.PqToolkitAPIClient.get_experiment_test_results","title":"<code>get_experiment_test_results(*, experiment_name, result_name)</code>","text":"<p>Method allows to get a list of experiments' results' names.</p> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <code>result_name</code> <code>str</code> <p>The name of the experiment result.</p> required <p>Returns:</p> Name Type Description <code>experiment_results</code> <code>PqTestResultsList | None</code> <p>An object representing the experiment's results'.</p> Source code in <code>src/pq-toolkit/pqtoolkit/api_client.py</code> <pre><code>@_serialize_with_pydantic\ndef get_experiment_test_results(\n    self, *, experiment_name: str, result_name: str\n) -&gt; PqTestResultsList | None:\n    \"\"\"\n    Method allows to get a list of experiments' results' names.\n\n    Parameters:\n        experiment_name: The name of the experiment.\n        result_name: The name of the experiment result.\n\n    Returns:\n        experiment_results: An object representing the experiment's results'.\n    \"\"\"\n\n    response = self._get(f\"/experiments/{experiment_name}/results/{result_name}\")\n    match response.status_code:\n        case 200:\n            experiment_results = response.json()\n            return experiment_results\n        case 404:\n            return None\n        case 401:\n            raise NotAuthorisedError()\n        case _:\n            raise DetailedError(response.json())\n</code></pre>"},{"location":"reference/dataclasses/","title":"Documentation for PQToolkit dataclasses","text":"<p>This classes are useful when working with tests (e.g. setting them up).</p>"},{"location":"reference/dataclasses/#pqtoolkit.dataclasses.PqExperiment","title":"<code>pqtoolkit.dataclasses.PqExperiment</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class representing experiments.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>UUID4 | str</code> <p>A unique ID of the experiment.</p> <code>name</code> <code>str</code> <p>Experiment name.</p> <code>description</code> <code>str</code> <p>Experiment description.</p> <code>tests</code> <code>list[PqTestMUSHRA | PqTestAPE | PqTestABX | PqTestAB]</code> <p>A list of test objects</p> Source code in <code>src/pq-toolkit/pqtoolkit/dataclasses.py</code> <pre><code>class PqExperiment(BaseModel):\n    \"\"\"\n    Class representing experiments.\n\n    Attributes:\n        uid: A unique ID of the experiment.\n        name: Experiment name.\n        description: Experiment description.\n        tests: A list of test objects\n    \"\"\"\n\n    uid: UUID4 | str = uuid.uuid4()\n    name: str\n    description: str\n    tests: list[PqTestMUSHRA | PqTestAPE | PqTestABX | PqTestAB]\n\n    @field_validator(\"tests\", mode=\"before\")  # noqa\n    @classmethod\n    def validate_tests(\n        cls, v: list\n    ) -&gt; list[PqTestMUSHRA | PqTestAPE | PqTestABX | PqTestAB]:\n        tests_list = []\n        for test in v:\n            object_type = type(test)\n            if inspect.isclass(object_type) and issubclass(object_type, PqTestBase):\n                tests_list.append(test)\n            else:\n                match PqTestTypes(test.get(\"type\")):\n                    case PqTestTypes.AB:\n                        tests_list.append(PqTestAB(**test))\n                    case PqTestTypes.ABX:\n                        tests_list.append(PqTestABX(**test))\n                    case PqTestTypes.APE:\n                        tests_list.append(PqTestAPE(**test))\n                    case PqTestTypes.MUSHRA:\n                        tests_list.append(PqTestMUSHRA(**test))\n        return tests_list\n</code></pre>"},{"location":"reference/dataclasses/#pqtoolkit.dataclasses.PqTestBase","title":"<code>pqtoolkit.dataclasses.PqTestBase</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for the test.</p> <p>Attributes:</p> Name Type Description <code>test_number</code> <code>int</code> <p>A number of the test.</p> <code>type</code> <code>PqTestTypes</code> <p>A type of the test.</p> Source code in <code>src/pq-toolkit/pqtoolkit/dataclasses.py</code> <pre><code>class PqTestBase(BaseModel):\n    \"\"\"\n    Base class for the test.\n\n    Attributes:\n        test_number: A number of the test.\n        type: A type of the test.\n    \"\"\"\n\n    model_config = ConfigDict(use_enum_values=True, validate_default=True)\n\n    test_number: int = Field(\n        alias=\"testNumber\", validation_alias=AliasChoices(\"testNumber\", \"test_number\")\n    )\n    type: PqTestTypes\n</code></pre>"},{"location":"reference/dataclasses/#pqtoolkit.dataclasses.PqTestAB","title":"<code>pqtoolkit.dataclasses.PqTestAB</code>","text":"<p>               Bases: <code>PqTestBase</code></p> <p>Base class for the AB test.</p> <p>Attributes:</p> Name Type Description <code>test_number</code> <p>A number of the test.</p> <code>type</code> <code>PqTestTypes</code> <p>A type of the test.</p> <code>samples</code> <code>list[PqSample]</code> <p>list of samples associated with the test</p> <code>questions</code> <code>list[PqQuestion]</code> <p>list of questions for the test</p> Source code in <code>src/pq-toolkit/pqtoolkit/dataclasses.py</code> <pre><code>class PqTestAB(PqTestBase):\n    \"\"\"\n    Base class for the AB test.\n\n    Attributes:\n        test_number: A number of the test.\n        type: A type of the test.\n        samples: list of samples associated with the test\n        questions: list of questions for the test\n    \"\"\"\n\n    samples: list[PqSample]\n    questions: list[PqQuestion]\n    type: PqTestTypes = PqTestTypes.AB\n</code></pre>"},{"location":"reference/dataclasses/#pqtoolkit.dataclasses.PqTestABX","title":"<code>pqtoolkit.dataclasses.PqTestABX</code>","text":"<p>               Bases: <code>PqTestBase</code></p> <p>Base class for the ABX test.</p> <p>Attributes:</p> Name Type Description <code>test_number</code> <p>A number of the test.</p> <code>type</code> <code>PqTestTypes</code> <p>A type of the test.</p> <code>x_sample_id</code> <code>str | None</code> <p>Unknown sample id - the one to identify</p> <code>samples</code> <code>list[PqSample]</code> <p>list of samples associated with the test</p> <code>questions</code> <code>list[PqQuestion] | None</code> <p>list of questions for the test</p> Source code in <code>src/pq-toolkit/pqtoolkit/dataclasses.py</code> <pre><code>class PqTestABX(PqTestBase):\n    \"\"\"\n    Base class for the ABX test.\n\n    Attributes:\n        test_number: A number of the test.\n        type: A type of the test.\n        x_sample_id: Unknown sample id - the one to identify\n        samples: list of samples associated with the test\n        questions: list of questions for the test\n    \"\"\"\n\n    x_sample_id: str | None = Field(\n        None,\n        alias=\"xSampleId\",\n        validation_alias=AliasChoices(\"xSampleId\", \"x_sample_id\"),\n    )\n    samples: list[PqSample]\n    questions: list[PqQuestion] | None = None\n    type: PqTestTypes = PqTestTypes.ABX\n</code></pre>"},{"location":"reference/dataclasses/#pqtoolkit.dataclasses.PqTestAPE","title":"<code>pqtoolkit.dataclasses.PqTestAPE</code>","text":"<p>               Bases: <code>PqTestBase</code></p> <p>Base class for the APE test.</p> <p>Attributes:</p> Name Type Description <code>test_number</code> <p>A number of the test.</p> <code>type</code> <code>PqTestTypes</code> <p>A type of the test.</p> <code>axis</code> <code>list[PqQuestion]</code> <p>A list of axis questions</p> <code>samples</code> <code>list[PqSample]</code> <p>list of samples associated with the test</p> Source code in <code>src/pq-toolkit/pqtoolkit/dataclasses.py</code> <pre><code>class PqTestAPE(PqTestBase):\n    \"\"\"\n    Base class for the APE test.\n\n    Attributes:\n        test_number: A number of the test.\n        type: A type of the test.\n        axis: A list of axis questions\n        samples: list of samples associated with the test\n    \"\"\"\n\n    axis: list[PqQuestion]\n    samples: list[PqSample]\n    type: PqTestTypes = PqTestTypes.APE\n</code></pre>"},{"location":"reference/dataclasses/#pqtoolkit.dataclasses.PqTestMUSHRA","title":"<code>pqtoolkit.dataclasses.PqTestMUSHRA</code>","text":"<p>               Bases: <code>PqTestBase</code></p> <p>Base class for the MUSHRA test.</p> <p>Attributes:</p> Name Type Description <code>test_number</code> <p>A number of the test.</p> <code>type</code> <code>PqTestTypes</code> <p>A type of the test.</p> <code>reference</code> <code>PqSample</code> <p>A reference sample</p> <code>question</code> <code>str | None</code> <p>A question for the test</p> <code>anchors</code> <code>list[PqSample]</code> <p>list of anchor samples associated with the test</p> <code>samples</code> <code>list[PqSample]</code> <p>list of samples associated with the test</p> Source code in <code>src/pq-toolkit/pqtoolkit/dataclasses.py</code> <pre><code>class PqTestMUSHRA(PqTestBase):\n    \"\"\"\n    Base class for the MUSHRA test.\n\n    Attributes:\n        test_number: A number of the test.\n        type: A type of the test.\n        reference: A reference sample\n        question: A question for the test\n        anchors: list of anchor samples associated with the test\n        samples: list of samples associated with the test\n    \"\"\"\n\n    reference: PqSample\n    question: str | None = None\n    anchors: list[PqSample]\n    samples: list[PqSample]\n    type: PqTestTypes = PqTestTypes.MUSHRA\n</code></pre>"},{"location":"reference/dataclasses/#pqtoolkit.dataclasses.PqTestTypes","title":"<code>pqtoolkit.dataclasses.PqTestTypes</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Class representing types of tests handled by PQToolkit.</p> Source code in <code>src/pq-toolkit/pqtoolkit/dataclasses.py</code> <pre><code>class PqTestTypes(Enum):\n    \"\"\"\n    Class representing types of tests handled by PQToolkit.\n    \"\"\"\n\n    AB: str = \"AB\"\n    ABX: str = \"ABX\"\n    APE: str = \"APE\"\n    MUSHRA: str = \"MUSHRA\"\n</code></pre>"},{"location":"reference/dataclasses/#pqtoolkit.dataclasses.PqSample","title":"<code>pqtoolkit.dataclasses.PqSample</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class representing sound sample.</p> <p>Attributes:</p> Name Type Description <code>sample_id</code> <code>str</code> <p>An ID of the sample.</p> <code>asset_path</code> <code>str</code> <p>Path to the sample.</p> Source code in <code>src/pq-toolkit/pqtoolkit/dataclasses.py</code> <pre><code>class PqSample(BaseModel):\n    \"\"\"\n    Class representing sound sample.\n\n    Attributes:\n        sample_id: An ID of the sample.\n        asset_path: Path to the sample.\n    \"\"\"\n\n    sample_id: str = Field(\n        alias=\"sampleId\", validation_alias=AliasChoices(\"sampleId\", \"sample_id\")\n    )\n    asset_path: str = Field(\n        alias=\"assetPath\", validation_alias=AliasChoices(\"assetPath\", \"asset_path\")\n    )\n</code></pre>"},{"location":"reference/dataclasses/#pqtoolkit.dataclasses.PqQuestion","title":"<code>pqtoolkit.dataclasses.PqQuestion</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class representing test question.</p> <p>Attributes:</p> Name Type Description <code>question_id</code> <code>str</code> <p>An ID of the question.</p> <code>text</code> <code>str</code> <p>Text of the question.</p> Source code in <code>src/pq-toolkit/pqtoolkit/dataclasses.py</code> <pre><code>class PqQuestion(BaseModel):\n    \"\"\"\n    Class representing test question.\n\n    Attributes:\n        question_id: An ID of the question.\n        text: Text of the question.\n    \"\"\"\n\n    question_id: str = Field(\n        alias=\"questionId\", validation_alias=AliasChoices(\"questionId\", \"question_id\")\n    )\n    text: str\n</code></pre>"},{"location":"reference/exceptions/","title":"Documentation for PQToolkit exceptions","text":""},{"location":"reference/exceptions/#pqtoolkit.exceptions.NotAuthorisedError","title":"<code>pqtoolkit.exceptions.NotAuthorisedError</code>","text":"<p>               Bases: <code>PqToolkitException</code></p> Source code in <code>src/pq-toolkit/pqtoolkit/exceptions.py</code> <pre><code>class NotAuthorisedError(PqToolkitException):\n    def __init__(self):\n        super().__init__(\"Not authorized, log in first\")\n</code></pre>"},{"location":"reference/exceptions/#pqtoolkit.exceptions.IncorrectLogin","title":"<code>pqtoolkit.exceptions.IncorrectLogin</code>","text":"<p>               Bases: <code>PqToolkitException</code></p> Source code in <code>src/pq-toolkit/pqtoolkit/exceptions.py</code> <pre><code>class IncorrectLogin(PqToolkitException):\n    def __init__(self) -&gt; None:\n        super().__init__(\"Incorrect login or password!\")\n</code></pre>"},{"location":"reference/exceptions/#pqtoolkit.exceptions.DetailedError","title":"<code>pqtoolkit.exceptions.DetailedError</code>","text":"<p>               Bases: <code>PqToolkitException</code></p> Source code in <code>src/pq-toolkit/pqtoolkit/exceptions.py</code> <pre><code>class DetailedError(PqToolkitException):\n    def __init__(self, content):\n        super().__init__(str(content))\n</code></pre>"},{"location":"reference/exceptions/#pqtoolkit.exceptions.PqToolkitException","title":"<code>pqtoolkit.exceptions.PqToolkitException</code>","text":"<p>               Bases: <code>Exception</code></p> Source code in <code>src/pq-toolkit/pqtoolkit/exceptions.py</code> <pre><code>class PqToolkitException(Exception):\n    pass\n</code></pre>"},{"location":"reference/exceptions/#pqtoolkit.exceptions.PqSerializationException","title":"<code>pqtoolkit.exceptions.PqSerializationException</code>","text":"<p>               Bases: <code>PqToolkitException</code></p> Source code in <code>src/pq-toolkit/pqtoolkit/exceptions.py</code> <pre><code>class PqSerializationException(PqToolkitException):\n    def __init__(self, details: str = None):\n        if details:\n            message = f\"Serialization exception: {details}\"\n        else:\n            message = \"A serialization exception occurred\"\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"reference/exceptions/#pqtoolkit.exceptions.PqValidationException","title":"<code>pqtoolkit.exceptions.PqValidationException</code>","text":"<p>               Bases: <code>PqToolkitException</code></p> Source code in <code>src/pq-toolkit/pqtoolkit/exceptions.py</code> <pre><code>class PqValidationException(PqToolkitException):\n    def __init__(self, details: str = None):\n        if details:\n            message = f\"Validation exception: {details}\"\n        else:\n            message = \"A validation exception occurred\"\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"reference/exceptions/#pqtoolkit.exceptions.PqExperimentAlreadyExistsException","title":"<code>pqtoolkit.exceptions.PqExperimentAlreadyExistsException</code>","text":"<p>               Bases: <code>PqToolkitException</code></p> Source code in <code>src/pq-toolkit/pqtoolkit/exceptions.py</code> <pre><code>class PqExperimentAlreadyExistsException(PqToolkitException):\n    def __init__(self, experiment_name: str = None):\n        if experiment_name:\n            message = f\"An experiment '{experiment_name}' already exists\"\n        else:\n            message = \"An experiment already exists\"\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"reference/exceptions/#pqtoolkit.exceptions.PqExperimentSetupException","title":"<code>pqtoolkit.exceptions.PqExperimentSetupException</code>","text":"<p>               Bases: <code>PqToolkitException</code></p> Source code in <code>src/pq-toolkit/pqtoolkit/exceptions.py</code> <pre><code>class PqExperimentSetupException(PqToolkitException):\n    def __init__(self, experiment_name: str, message: str = None):\n        if message:\n            _message = f\"There was a problem setting up the experiment '{experiment_name}': {message}.\"\n        else:\n            _message = (\n                f\"There was a problem setting up the experiment '{experiment_name}'.\"\n            )\n        self.message = _message\n        super().__init__(self.message)\n</code></pre>"},{"location":"reference/exceptions/#pqtoolkit.exceptions.PqExperimentSampleUploadException","title":"<code>pqtoolkit.exceptions.PqExperimentSampleUploadException</code>","text":"<p>               Bases: <code>PqToolkitException</code></p> Source code in <code>src/pq-toolkit/pqtoolkit/exceptions.py</code> <pre><code>class PqExperimentSampleUploadException(PqToolkitException):\n    def __init__(self, experiment_name: str, sample_name: str, message: str = None):\n        if message:\n            _message = (\n                f\"There was a problem with uploading a sample '{sample_name}' \"\n                f\"to an experiment '{experiment_name}': {message}.\"\n            )\n        else:\n            _message = (\n                f\"There was a problem with uploading a sample '{sample_name}' \"\n                f\"to an experiment '{experiment_name}'.\"\n            )\n        self.message = _message\n        super().__init__(self.message)\n</code></pre>"}]}